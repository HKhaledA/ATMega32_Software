
ATMEGA32A_SW.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000976  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  00000976  00000a0a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001c  00800076  00800076  00000a20  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a20  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000a50  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  00000a8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001850  00000000  00000000  00000b64  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b3e  00000000  00000000  000023b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009d2  00000000  00000000  00002ef2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000254  00000000  00000000  000038c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008f1  00000000  00000000  00003b18  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000640  00000000  00000000  00004409  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00004a49  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 38 02 	jmp	0x470	; 0x470 <__vector_1>
   8:	0c 94 65 02 	jmp	0x4ca	; 0x4ca <__vector_2>
   c:	0c 94 92 02 	jmp	0x524	; 0x524 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e7       	ldi	r30, 0x76	; 118
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 37       	cpi	r26, 0x76	; 118
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a6 e7       	ldi	r26, 0x76	; 118
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 39       	cpi	r26, 0x92	; 146
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 b9 04 	jmp	0x972	; 0x972 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include <Atmega32A_ADC.h>
#include <LCD.h>
int main(void)
{
	 /* Change Req Settings Struct */
	 ADC_ControlBlock.ADC_Enable=1;
  92:	ec e7       	ldi	r30, 0x7C	; 124
  94:	f0 e0       	ldi	r31, 0x00	; 0
  96:	80 81       	ld	r24, Z
  98:	81 60       	ori	r24, 0x01	; 1
  9a:	80 83       	st	Z, r24
	 ADC_ControlBlock.ADC_Mode= SingleConvertion;
  9c:	12 82       	std	Z+2, r1	; 0x02
  9e:	11 82       	std	Z+1, r1	; 0x01
	 ADC_ControlBlock.ADC_FreqDiv=ADC_Div_128;
  a0:	87 e0       	ldi	r24, 0x07	; 7
  a2:	83 83       	std	Z+3, r24	; 0x03
	 ADC_ControlBlock.ADC_Resolution=ADC_10Bit;
  a4:	81 e0       	ldi	r24, 0x01	; 1
  a6:	84 83       	std	Z+4, r24	; 0x04
	 ADC_ControlBlock.ADC_Interrupt=ADC_Polling;
  a8:	15 82       	std	Z+5, r1	; 0x05
	 ADC_ControlBlock.ADC_VoltageReferPin=AREF_VoltRef;
  aa:	10 86       	std	Z+8, r1	; 0x08
	 ADC_ControlBlock.ADC_VolatgeRefer_Value=1.6;
  ac:	8d ec       	ldi	r24, 0xCD	; 205
  ae:	9c ec       	ldi	r25, 0xCC	; 204
  b0:	ac ec       	ldi	r26, 0xCC	; 204
  b2:	bf e3       	ldi	r27, 0x3F	; 63
  b4:	81 87       	std	Z+9, r24	; 0x09
  b6:	92 87       	std	Z+10, r25	; 0x0a
  b8:	a3 87       	std	Z+11, r26	; 0x0b
  ba:	b4 87       	std	Z+12, r27	; 0x0c
	 ADC_ControlBlock.ADC_Channel=ADC0_Channel;
  bc:	15 86       	std	Z+13, r1	; 0x0d
	 ADC_Init();
  be:	0e 94 a6 01 	call	0x34c	; 0x34c <ADC_Init>
	 LCD_init();
  c2:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_init>
	 while(1)
    {
			 ADC_ControlBlock.ADC_Channel=ADC0_Channel;
  c6:	cc e7       	ldi	r28, 0x7C	; 124
  c8:	d0 e0       	ldi	r29, 0x00	; 0
			ADC_ControlBlock.ADC_StartConvertion=1;
  ca:	11 e0       	ldi	r17, 0x01	; 1
  cc:	01 2f       	mov	r16, r17
			ADC_Update();	
			LCD_DisplayInt(ADC_ControlBlock.ADC_Output_InVolts);
			LCD_DisplayString(".");
			ADC_ControlBlock.ADC_StartConvertion=1;
			ADC_Update();	
			LCD_DisplayInt(((uint32)(ADC_ControlBlock.ADC_Output_InVolts*10))%10);
  ce:	0f 2e       	mov	r0, r31
  d0:	fa e0       	ldi	r31, 0x0A	; 10
  d2:	cf 2e       	mov	r12, r31
  d4:	d1 2c       	mov	r13, r1
  d6:	e1 2c       	mov	r14, r1
  d8:	f1 2c       	mov	r15, r1
  da:	f0 2d       	mov	r31, r0
	 ADC_ControlBlock.ADC_Channel=ADC0_Channel;
	 ADC_Init();
	 LCD_init();
	 while(1)
    {
			 ADC_ControlBlock.ADC_Channel=ADC0_Channel;
  dc:	1d 86       	std	Y+13, r1	; 0x0d
			ADC_ControlBlock.ADC_StartConvertion=1;
  de:	0f 87       	std	Y+15, r16	; 0x0f
			ADC_Update();	
  e0:	0e 94 bf 01 	call	0x37e	; 0x37e <ADC_Update>
			LCD_DisplayString("Temp = ");
  e4:	80 e6       	ldi	r24, 0x60	; 96
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	0e 94 64 01 	call	0x2c8	; 0x2c8 <LCD_DisplayString>
			LCD_DisplayInt(ADC_ControlBlock.ADC_Output_InVolts*100);
  ec:	20 e0       	ldi	r18, 0x00	; 0
  ee:	30 e0       	ldi	r19, 0x00	; 0
  f0:	48 ec       	ldi	r20, 0xC8	; 200
  f2:	52 e4       	ldi	r21, 0x42	; 66
  f4:	68 89       	ldd	r22, Y+16	; 0x10
  f6:	79 89       	ldd	r23, Y+17	; 0x11
  f8:	8a 89       	ldd	r24, Y+18	; 0x12
  fa:	9b 89       	ldd	r25, Y+19	; 0x13
  fc:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__mulsf3>
 100:	0e 94 31 03 	call	0x662	; 0x662 <__fixsfsi>
 104:	0e 94 87 01 	call	0x30e	; 0x30e <LCD_DisplayInt>
			LCD_DisplayString("C");
 108:	88 e6       	ldi	r24, 0x68	; 104
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	0e 94 64 01 	call	0x2c8	; 0x2c8 <LCD_DisplayString>
			
			ADC_ControlBlock.ADC_Channel=ADC1_Channel;
 110:	1d 87       	std	Y+13, r17	; 0x0d
			ADC_ControlBlock.ADC_StartConvertion=1;
 112:	1f 87       	std	Y+15, r17	; 0x0f
			LCD_Select_RowCol(1,0);
 114:	60 e0       	ldi	r22, 0x00	; 0
 116:	81 2f       	mov	r24, r17
 118:	0e 94 73 01 	call	0x2e6	; 0x2e6 <LCD_Select_RowCol>
			LCD_DisplayString("Volt = ");
 11c:	8a e6       	ldi	r24, 0x6A	; 106
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	0e 94 64 01 	call	0x2c8	; 0x2c8 <LCD_DisplayString>
			ADC_Update();	
 124:	0e 94 bf 01 	call	0x37e	; 0x37e <ADC_Update>
			LCD_DisplayInt(ADC_ControlBlock.ADC_Output_InVolts);
 128:	68 89       	ldd	r22, Y+16	; 0x10
 12a:	79 89       	ldd	r23, Y+17	; 0x11
 12c:	8a 89       	ldd	r24, Y+18	; 0x12
 12e:	9b 89       	ldd	r25, Y+19	; 0x13
 130:	0e 94 31 03 	call	0x662	; 0x662 <__fixsfsi>
 134:	0e 94 87 01 	call	0x30e	; 0x30e <LCD_DisplayInt>
			LCD_DisplayString(".");
 138:	82 e7       	ldi	r24, 0x72	; 114
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	0e 94 64 01 	call	0x2c8	; 0x2c8 <LCD_DisplayString>
			ADC_ControlBlock.ADC_StartConvertion=1;
 140:	1f 87       	std	Y+15, r17	; 0x0f
			ADC_Update();	
 142:	0e 94 bf 01 	call	0x37e	; 0x37e <ADC_Update>
			LCD_DisplayInt(((uint32)(ADC_ControlBlock.ADC_Output_InVolts*10))%10);
 146:	20 e0       	ldi	r18, 0x00	; 0
 148:	30 e0       	ldi	r19, 0x00	; 0
 14a:	40 e2       	ldi	r20, 0x20	; 32
 14c:	51 e4       	ldi	r21, 0x41	; 65
 14e:	68 89       	ldd	r22, Y+16	; 0x10
 150:	79 89       	ldd	r23, Y+17	; 0x11
 152:	8a 89       	ldd	r24, Y+18	; 0x12
 154:	9b 89       	ldd	r25, Y+19	; 0x13
 156:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__mulsf3>
 15a:	0e 94 38 03 	call	0x670	; 0x670 <__fixunssfsi>
 15e:	a7 01       	movw	r20, r14
 160:	96 01       	movw	r18, r12
 162:	0e 94 62 04 	call	0x8c4	; 0x8c4 <__udivmodsi4>
 166:	0e 94 87 01 	call	0x30e	; 0x30e <LCD_DisplayInt>
			LCD_DisplayString("V");
 16a:	84 e7       	ldi	r24, 0x74	; 116
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	0e 94 64 01 	call	0x2c8	; 0x2c8 <LCD_DisplayString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 172:	2f ef       	ldi	r18, 0xFF	; 255
 174:	84 e3       	ldi	r24, 0x34	; 52
 176:	9c e0       	ldi	r25, 0x0C	; 12
 178:	21 50       	subi	r18, 0x01	; 1
 17a:	80 40       	sbci	r24, 0x00	; 0
 17c:	90 40       	sbci	r25, 0x00	; 0
 17e:	e1 f7       	brne	.-8      	; 0x178 <main+0xe6>
 180:	00 c0       	rjmp	.+0      	; 0x182 <main+0xf0>
 182:	00 00       	nop
			_delay_ms(250);
			LCD_Clear();
 184:	0e 94 60 01 	call	0x2c0	; 0x2c0 <LCD_Clear>
    }
 188:	a9 cf       	rjmp	.-174    	; 0xdc <main+0x4a>

0000018a <Send_instruction>:
	}
	
	void Send_instruction(uint8 instruction)
	{
		/* RW, RS Should be 0 when Writing instructions to LCD */
		CLEARBIT(LCD_Control_reg_OP,RS);
 18a:	c0 98       	cbi	0x18, 0	; 24
 18c:	ef e9       	ldi	r30, 0x9F	; 159
 18e:	ff e0       	ldi	r31, 0x0F	; 15
 190:	31 97       	sbiw	r30, 0x01	; 1
 192:	f1 f7       	brne	.-4      	; 0x190 <Send_instruction+0x6>
 194:	00 c0       	rjmp	.+0      	; 0x196 <Send_instruction+0xc>
 196:	00 00       	nop
		
		/* Delay of Address Set 60ns minimum */
		_delay_ms(1);
		
		/* Enable LCD E=1 */
		SETBIT(LCD_Control_reg_OP,E);
 198:	c2 9a       	sbi	0x18, 2	; 24
 19a:	ef e9       	ldi	r30, 0x9F	; 159
 19c:	ff e0       	ldi	r31, 0x0F	; 15
 19e:	31 97       	sbiw	r30, 0x01	; 1
 1a0:	f1 f7       	brne	.-4      	; 0x19e <Send_instruction+0x14>
 1a2:	00 c0       	rjmp	.+0      	; 0x1a4 <Send_instruction+0x1a>
 1a4:	00 00       	nop
			#if FARES_KIT
				LCD_Data_Reg_OP &=(0x87);
				LCD_Data_Reg_OP |= ((instruction & 0xF0)>>1);
			#elif Upper_Data_port
				/* clear the Prev Data */
				LCD_Data_Reg_OP &=0x0F;
 1a6:	98 b3       	in	r25, 0x18	; 24
 1a8:	9f 70       	andi	r25, 0x0F	; 15
 1aa:	98 bb       	out	0x18, r25	; 24
				LCD_Data_Reg_OP |= (instruction & 0xF0);
 1ac:	98 b3       	in	r25, 0x18	; 24
 1ae:	28 2f       	mov	r18, r24
 1b0:	20 7f       	andi	r18, 0xF0	; 240
 1b2:	92 2b       	or	r25, r18
 1b4:	98 bb       	out	0x18, r25	; 24
 1b6:	ef e9       	ldi	r30, 0x9F	; 159
 1b8:	ff e0       	ldi	r31, 0x0F	; 15
 1ba:	31 97       	sbiw	r30, 0x01	; 1
 1bc:	f1 f7       	brne	.-4      	; 0x1ba <Send_instruction+0x30>
 1be:	00 c0       	rjmp	.+0      	; 0x1c0 <Send_instruction+0x36>
 1c0:	00 00       	nop
			#endif
			/* Data set-up time delay  Tdsw = 195 ns */
			_delay_ms(1);
		
			/* disable LCD E=0 */
			CLEARBIT(LCD_Control_reg_OP,E);
 1c2:	c2 98       	cbi	0x18, 2	; 24
 1c4:	ef e9       	ldi	r30, 0x9F	; 159
 1c6:	ff e0       	ldi	r31, 0x0F	; 15
 1c8:	31 97       	sbiw	r30, 0x01	; 1
 1ca:	f1 f7       	brne	.-4      	; 0x1c8 <Send_instruction+0x3e>
 1cc:	00 c0       	rjmp	.+0      	; 0x1ce <Send_instruction+0x44>
 1ce:	00 00       	nop
			/* Data Hold delay Th = 10ns */
			_delay_ms(1);
			
			/* Enable LCD E=1 */
			SETBIT(LCD_Control_reg_OP,E);
 1d0:	c2 9a       	sbi	0x18, 2	; 24
 1d2:	ef e9       	ldi	r30, 0x9F	; 159
 1d4:	ff e0       	ldi	r31, 0x0F	; 15
 1d6:	31 97       	sbiw	r30, 0x01	; 1
 1d8:	f1 f7       	brne	.-4      	; 0x1d6 <Send_instruction+0x4c>
 1da:	00 c0       	rjmp	.+0      	; 0x1dc <Send_instruction+0x52>
 1dc:	00 00       	nop
				LCD_Data_Reg_OP &=(0x87);
				LCD_Data_Reg_OP |= (((instruction<<4) & 0xF0)>>1);
			
			#elif Upper_Data_port
				/* clear the Prev Data */
				LCD_Data_Reg_OP &=0x0F;
 1de:	98 b3       	in	r25, 0x18	; 24
 1e0:	9f 70       	andi	r25, 0x0F	; 15
 1e2:	98 bb       	out	0x18, r25	; 24
				LCD_Data_Reg_OP |= ((instruction <<4) );
 1e4:	28 b3       	in	r18, 0x18	; 24
 1e6:	f0 e1       	ldi	r31, 0x10	; 16
 1e8:	8f 9f       	mul	r24, r31
 1ea:	c0 01       	movw	r24, r0
 1ec:	11 24       	eor	r1, r1
 1ee:	82 2b       	or	r24, r18
 1f0:	88 bb       	out	0x18, r24	; 24
 1f2:	8f e9       	ldi	r24, 0x9F	; 159
 1f4:	9f e0       	ldi	r25, 0x0F	; 15
 1f6:	01 97       	sbiw	r24, 0x01	; 1
 1f8:	f1 f7       	brne	.-4      	; 0x1f6 <Send_instruction+0x6c>
 1fa:	00 c0       	rjmp	.+0      	; 0x1fc <Send_instruction+0x72>
 1fc:	00 00       	nop
				LCD_Data_Reg_OP |= ((instruction) & 0x0f);
			#endif
				/* Data set-up time delay  Tdsw = 195 ns */
				_delay_ms(1);
				/* disable LCD E=0 */
				CLEARBIT(LCD_Control_reg_OP,E);
 1fe:	c2 98       	cbi	0x18, 2	; 24
 200:	ef e9       	ldi	r30, 0x9F	; 159
 202:	ff e0       	ldi	r31, 0x0F	; 15
 204:	31 97       	sbiw	r30, 0x01	; 1
 206:	f1 f7       	brne	.-4      	; 0x204 <Send_instruction+0x7a>
 208:	00 c0       	rjmp	.+0      	; 0x20a <Send_instruction+0x80>
 20a:	00 00       	nop
 20c:	08 95       	ret

0000020e <LCD_init>:
	#include <stdlib.h>
	
	void LCD_init(void)
	{
		/* Set The Control Pins Direction to OUtput */
		LCD_Control_reg_DIR |=(1<<E) | (1<<RW) | (1<<RS);
 20e:	87 b3       	in	r24, 0x17	; 23
 210:	87 60       	ori	r24, 0x07	; 7
 212:	87 bb       	out	0x17, r24	; 23
		LCD_Control_reg_DIR |=(1<<E) | (1<<RS);		/* Fares */
 214:	87 b3       	in	r24, 0x17	; 23
 216:	85 60       	ori	r24, 0x05	; 5
 218:	87 bb       	out	0x17, r24	; 23
			#if FARES_KIT
				LCD_Data_Reg_DIR |= (0x78);

			#elif Upper_Data_port
				/* Set The Direction of The Upper Pins to OP*/
				LCD_Data_Reg_DIR |=(0xF0);
 21a:	87 b3       	in	r24, 0x17	; 23
 21c:	80 6f       	ori	r24, 0xF0	; 240
 21e:	87 bb       	out	0x17, r24	; 23
			#else
				/* Set The Direction of The LOWER Pins to OP*/
				LCD_Data_Reg_DIR|=(0x0F);
			#endif
			Send_instruction(Return_Home);
 220:	82 e0       	ldi	r24, 0x02	; 2
 222:	0e 94 c5 00 	call	0x18a	; 0x18a <Send_instruction>
		#endif
		
		Send_instruction(Data_Set);
 226:	88 e2       	ldi	r24, 0x28	; 40
 228:	0e 94 c5 00 	call	0x18a	; 0x18a <Send_instruction>
		Send_instruction(Display_on);
 22c:	8c e0       	ldi	r24, 0x0C	; 12
 22e:	0e 94 c5 00 	call	0x18a	; 0x18a <Send_instruction>
		Send_instruction(Clear_display);
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	0e 94 c5 00 	call	0x18a	; 0x18a <Send_instruction>
 238:	08 95       	ret

0000023a <LCD_DisplayChar>:
	
	
	void LCD_DisplayChar(uint8 Data)
	{
		/* RW  Should be 0  and RS should be 1 when Writing Data to LCD */
		SETBIT(LCD_Control_reg_OP,RS);
 23a:	c0 9a       	sbi	0x18, 0	; 24
		CLEARBIT(LCD_Control_reg_OP,RW);
 23c:	c1 98       	cbi	0x18, 1	; 24
 23e:	ef e9       	ldi	r30, 0x9F	; 159
 240:	ff e0       	ldi	r31, 0x0F	; 15
 242:	31 97       	sbiw	r30, 0x01	; 1
 244:	f1 f7       	brne	.-4      	; 0x242 <LCD_DisplayChar+0x8>
 246:	00 c0       	rjmp	.+0      	; 0x248 <LCD_DisplayChar+0xe>
 248:	00 00       	nop
		/* Delay of Address Set 60ns minimum */
		_delay_ms(1);
		/* Enable LCD E=1 */
		SETBIT(LCD_Control_reg_OP,E);
 24a:	c2 9a       	sbi	0x18, 2	; 24
 24c:	ef e9       	ldi	r30, 0x9F	; 159
 24e:	ff e0       	ldi	r31, 0x0F	; 15
 250:	31 97       	sbiw	r30, 0x01	; 1
 252:	f1 f7       	brne	.-4      	; 0x250 <LCD_DisplayChar+0x16>
 254:	00 c0       	rjmp	.+0      	; 0x256 <LCD_DisplayChar+0x1c>
 256:	00 00       	nop
			#if FARES_KIT
				LCD_Data_Reg_OP &=(0x87);
				LCD_Data_Reg_OP |= ((Data & 0xF0)>>1);
			#elif Upper_Data_port
				/* clear the Prev Data */
				LCD_Data_Reg_OP &=0x0F;
 258:	98 b3       	in	r25, 0x18	; 24
 25a:	9f 70       	andi	r25, 0x0F	; 15
 25c:	98 bb       	out	0x18, r25	; 24
				/* Send MSB (4-bits )*/
				LCD_Data_Reg_OP |= (Data & 0xF0);
 25e:	98 b3       	in	r25, 0x18	; 24
 260:	28 2f       	mov	r18, r24
 262:	20 7f       	andi	r18, 0xF0	; 240
 264:	92 2b       	or	r25, r18
 266:	98 bb       	out	0x18, r25	; 24
 268:	ef e9       	ldi	r30, 0x9F	; 159
 26a:	ff e0       	ldi	r31, 0x0F	; 15
 26c:	31 97       	sbiw	r30, 0x01	; 1
 26e:	f1 f7       	brne	.-4      	; 0x26c <LCD_DisplayChar+0x32>
 270:	00 c0       	rjmp	.+0      	; 0x272 <LCD_DisplayChar+0x38>
 272:	00 00       	nop
			#endif
				
			/* Data set-up time delay  Tdsw = 195 ns */
			_delay_ms(1);
			/* disable LCD E=0 */
			CLEARBIT(LCD_Control_reg_OP,E);
 274:	c2 98       	cbi	0x18, 2	; 24
 276:	ef e9       	ldi	r30, 0x9F	; 159
 278:	ff e0       	ldi	r31, 0x0F	; 15
 27a:	31 97       	sbiw	r30, 0x01	; 1
 27c:	f1 f7       	brne	.-4      	; 0x27a <LCD_DisplayChar+0x40>
 27e:	00 c0       	rjmp	.+0      	; 0x280 <LCD_DisplayChar+0x46>
 280:	00 00       	nop
			/* Data Hold delay Th = 10ns */
			_delay_ms(1);
			/* Enable LCD E=1 */
			SETBIT(LCD_Control_reg_OP,E); 
 282:	c2 9a       	sbi	0x18, 2	; 24
			#if FARES_KIT
				LCD_Data_Reg_OP &=(0x87);
				LCD_Data_Reg_OP |= (((Data<<4) & 0xF0)>>1);
			#elif Upper_Data_port
				/* clear the Prev Data */
				LCD_Data_Reg_OP &=0x0F;
 284:	98 b3       	in	r25, 0x18	; 24
 286:	9f 70       	andi	r25, 0x0F	; 15
 288:	98 bb       	out	0x18, r25	; 24
				LCD_Data_Reg_OP |= ((Data <<4) & 0xF0);
 28a:	28 b3       	in	r18, 0x18	; 24
 28c:	f0 e1       	ldi	r31, 0x10	; 16
 28e:	8f 9f       	mul	r24, r31
 290:	c0 01       	movw	r24, r0
 292:	11 24       	eor	r1, r1
 294:	82 2b       	or	r24, r18
 296:	88 bb       	out	0x18, r24	; 24
 298:	8f e9       	ldi	r24, 0x9F	; 159
 29a:	9f e0       	ldi	r25, 0x0F	; 15
 29c:	01 97       	sbiw	r24, 0x01	; 1
 29e:	f1 f7       	brne	.-4      	; 0x29c <LCD_DisplayChar+0x62>
 2a0:	00 c0       	rjmp	.+0      	; 0x2a2 <LCD_DisplayChar+0x68>
 2a2:	00 00       	nop
 2a4:	ef e9       	ldi	r30, 0x9F	; 159
 2a6:	ff e0       	ldi	r31, 0x0F	; 15
 2a8:	31 97       	sbiw	r30, 0x01	; 1
 2aa:	f1 f7       	brne	.-4      	; 0x2a8 <LCD_DisplayChar+0x6e>
 2ac:	00 c0       	rjmp	.+0      	; 0x2ae <LCD_DisplayChar+0x74>
 2ae:	00 00       	nop
			
			#endif
		/* Data set-up time delay  Tdsw = 195 ns */
		_delay_ms(1);
		/* disable LCD E=0 */
		CLEARBIT(LCD_Control_reg_OP,E);						
 2b0:	c2 98       	cbi	0x18, 2	; 24
 2b2:	8f e9       	ldi	r24, 0x9F	; 159
 2b4:	9f e0       	ldi	r25, 0x0F	; 15
 2b6:	01 97       	sbiw	r24, 0x01	; 1
 2b8:	f1 f7       	brne	.-4      	; 0x2b6 <LCD_DisplayChar+0x7c>
 2ba:	00 c0       	rjmp	.+0      	; 0x2bc <LCD_DisplayChar+0x82>
 2bc:	00 00       	nop
 2be:	08 95       	ret

000002c0 <LCD_Clear>:
	}
	
	void LCD_Clear(void)
	{
		/* Clear Screen */
		Send_instruction(Clear_display); 
 2c0:	81 e0       	ldi	r24, 0x01	; 1
 2c2:	0e 94 c5 00 	call	0x18a	; 0x18a <Send_instruction>
 2c6:	08 95       	ret

000002c8 <LCD_DisplayString>:
	}
	
	
	void LCD_DisplayString(char * ptr)
	{
 2c8:	cf 93       	push	r28
 2ca:	df 93       	push	r29
 2cc:	ec 01       	movw	r28, r24
		while(*ptr != '\0')
 2ce:	88 81       	ld	r24, Y
 2d0:	88 23       	and	r24, r24
 2d2:	31 f0       	breq	.+12     	; 0x2e0 <LCD_DisplayString+0x18>
 2d4:	21 96       	adiw	r28, 0x01	; 1
		{
			LCD_DisplayChar(*ptr);
 2d6:	0e 94 1d 01 	call	0x23a	; 0x23a <LCD_DisplayChar>
	}
	
	
	void LCD_DisplayString(char * ptr)
	{
		while(*ptr != '\0')
 2da:	89 91       	ld	r24, Y+
 2dc:	81 11       	cpse	r24, r1
 2de:	fb cf       	rjmp	.-10     	; 0x2d6 <LCD_DisplayString+0xe>
		{
			LCD_DisplayChar(*ptr);
			ptr++;
		}
	}
 2e0:	df 91       	pop	r29
 2e2:	cf 91       	pop	r28
 2e4:	08 95       	ret

000002e6 <LCD_Select_RowCol>:
	
	void LCD_Select_RowCol(uint8 Row , uint8 col)
	{
		uint8 Address=0;
		
		switch(Row)
 2e6:	81 30       	cpi	r24, 0x01	; 1
 2e8:	31 f0       	breq	.+12     	; 0x2f6 <LCD_Select_RowCol+0x10>
 2ea:	60 f0       	brcs	.+24     	; 0x304 <LCD_Select_RowCol+0x1e>
 2ec:	82 30       	cpi	r24, 0x02	; 2
 2ee:	29 f0       	breq	.+10     	; 0x2fa <LCD_Select_RowCol+0x14>
 2f0:	83 30       	cpi	r24, 0x03	; 3
 2f2:	29 f0       	breq	.+10     	; 0x2fe <LCD_Select_RowCol+0x18>
 2f4:	06 c0       	rjmp	.+12     	; 0x302 <LCD_Select_RowCol+0x1c>
					/* When Writing To LCD 1st Col The Base Address is 0x00 */
						Address=col + LCD_1ST_BASE;
						break;
			case 1:
					/* When Writing To LCD 2nd Col The Base Address is 0x40 */
						Address=col + LCD_2ND_BASE;
 2f6:	60 5c       	subi	r22, 0xC0	; 192
						break;
 2f8:	05 c0       	rjmp	.+10     	; 0x304 <LCD_Select_RowCol+0x1e>
			case 2:
					/* When Writing To LCD 1st Col The Base Address is 0x10 */
						Address = col + LCD_3RD_BASE;
 2fa:	60 5f       	subi	r22, 0xF0	; 240
						break;
 2fc:	03 c0       	rjmp	.+6      	; 0x304 <LCD_Select_RowCol+0x1e>
			case 3:
					/* When Writing To LCD 1st Col The Base Address is 0x50 */
						Address=col + LCD_4TH_BASE;
 2fe:	60 5b       	subi	r22, 0xB0	; 176
						break;		
 300:	01 c0       	rjmp	.+2      	; 0x304 <LCD_Select_RowCol+0x1e>
		}
	}
	
	void LCD_Select_RowCol(uint8 Row , uint8 col)
	{
		uint8 Address=0;
 302:	60 e0       	ldi	r22, 0x00	; 0
						break;		
			default:
						break;
		}
		
		Send_instruction(DDRAM_CONST|Address);
 304:	86 2f       	mov	r24, r22
 306:	80 68       	ori	r24, 0x80	; 128
 308:	0e 94 c5 00 	call	0x18a	; 0x18a <Send_instruction>
 30c:	08 95       	ret

0000030e <LCD_DisplayInt>:
	}
	
	
	void LCD_DisplayInt(sint32 data)
	{
 30e:	cf 93       	push	r28
 310:	df 93       	push	r29
 312:	cd b7       	in	r28, 0x3d	; 61
 314:	de b7       	in	r29, 0x3e	; 62
 316:	65 97       	sbiw	r28, 0x15	; 21
 318:	0f b6       	in	r0, 0x3f	; 63
 31a:	f8 94       	cli
 31c:	de bf       	out	0x3e, r29	; 62
 31e:	0f be       	out	0x3f, r0	; 63
 320:	cd bf       	out	0x3d, r28	; 61
 322:	dc 01       	movw	r26, r24
 324:	cb 01       	movw	r24, r22
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 326:	4a e0       	ldi	r20, 0x0A	; 10
 328:	be 01       	movw	r22, r28
 32a:	6f 5f       	subi	r22, 0xFF	; 255
 32c:	7f 4f       	sbci	r23, 0xFF	; 255
 32e:	0e 94 84 04 	call	0x908	; 0x908 <__itoa_ncheck>
		/* String to hold the ascii result */
		char Result[21];
		 /* 10 for decimal */
		itoa(data,Result,10);
		/* Display The Result */
		LCD_DisplayString(Result);
 332:	ce 01       	movw	r24, r28
 334:	01 96       	adiw	r24, 0x01	; 1
 336:	0e 94 64 01 	call	0x2c8	; 0x2c8 <LCD_DisplayString>
	}
 33a:	65 96       	adiw	r28, 0x15	; 21
 33c:	0f b6       	in	r0, 0x3f	; 63
 33e:	f8 94       	cli
 340:	de bf       	out	0x3e, r29	; 62
 342:	0f be       	out	0x3f, r0	; 63
 344:	cd bf       	out	0x3d, r28	; 61
 346:	df 91       	pop	r29
 348:	cf 91       	pop	r28
 34a:	08 95       	ret

0000034c <ADC_Init>:
ADC_ControlStruct ADC_ControlBlock;


void	ADC_Init(void)
{
		if		(ADC_ControlBlock.ADC_Enable == 1)
 34c:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <ADC_ControlBlock>
 350:	80 ff       	sbrs	r24, 0
 352:	13 c0       	rjmp	.+38     	; 0x37a <ADC_Init+0x2e>
		{
				ADMUX->Reg =  ADC_ControlBlock.ADC_VoltageReferPin;
 354:	ec e7       	ldi	r30, 0x7C	; 124
 356:	f0 e0       	ldi	r31, 0x00	; 0
 358:	80 85       	ldd	r24, Z+8	; 0x08
 35a:	87 b9       	out	0x07, r24	; 7
				
				
				SFIOR->Reg &= 0x0f;
 35c:	80 b7       	in	r24, 0x30	; 48
 35e:	8f 70       	andi	r24, 0x0F	; 15
 360:	80 bf       	out	0x30, r24	; 48
				SFIOR->Reg |= (ADC_ControlBlock.ADC_Mode >> 8); 
 362:	90 b7       	in	r25, 0x30	; 48
 364:	82 81       	ldd	r24, Z+2	; 0x02
 366:	89 2b       	or	r24, r25
 368:	80 bf       	out	0x30, r24	; 48
 36a:	95 81       	ldd	r25, Z+5	; 0x05
 36c:	83 81       	ldd	r24, Z+3	; 0x03
 36e:	89 2b       	or	r24, r25
 370:	80 68       	ori	r24, 0x80	; 128
				ADCSRA->Reg = (1<<7)
 372:	91 81       	ldd	r25, Z+1	; 0x01
 374:	89 2b       	or	r24, r25
 376:	86 b9       	out	0x06, r24	; 6
 378:	08 95       	ret
						| ADC_ControlBlock.ADC_Interrupt
						| ADC_ControlBlock.ADC_FreqDiv;
		}
		else
		{
				ADCSRA->Reg = 0;
 37a:	16 b8       	out	0x06, r1	; 6
 37c:	08 95       	ret

0000037e <ADC_Update>:
		}
}

void ADC_Update(void)
{
 37e:	cf 92       	push	r12
 380:	df 92       	push	r13
 382:	ef 92       	push	r14
 384:	ff 92       	push	r15
 386:	cf 93       	push	r28
 388:	df 93       	push	r29
	uint16 Temp_data=0;
	ADMUX->Reg &= 0xC0;
 38a:	87 b1       	in	r24, 0x07	; 7
 38c:	80 7c       	andi	r24, 0xC0	; 192
 38e:	87 b9       	out	0x07, r24	; 7
	ADMUX->Reg |= ADC_ControlBlock.ADC_Channel;
 390:	97 b1       	in	r25, 0x07	; 7
 392:	ec e7       	ldi	r30, 0x7C	; 124
 394:	f0 e0       	ldi	r31, 0x00	; 0
 396:	85 85       	ldd	r24, Z+13	; 0x0d
 398:	89 2b       	or	r24, r25
 39a:	87 b9       	out	0x07, r24	; 7
	if		(ADC_ControlBlock.ADC_Resolution == ADC_10Bit)
 39c:	84 81       	ldd	r24, Z+4	; 0x04
 39e:	81 30       	cpi	r24, 0x01	; 1
 3a0:	19 f4       	brne	.+6      	; 0x3a8 <ADC_Update+0x2a>
	{
		ADMUX->Reg |= RIGHT_Adjust;
 3a2:	87 b1       	in	r24, 0x07	; 7
 3a4:	87 b9       	out	0x07, r24	; 7
 3a6:	01 c0       	rjmp	.+2      	; 0x3aa <ADC_Update+0x2c>
	}
	else
	{
		ADMUX->Reg |= LEFT_Adjust;
 3a8:	3d 9a       	sbi	0x07, 5	; 7
	}
	
	if		(ADC_ControlBlock.ADC_StartConvertion == 1)
 3aa:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <ADC_ControlBlock+0xf>
 3ae:	81 30       	cpi	r24, 0x01	; 1
 3b0:	09 f0       	breq	.+2      	; 0x3b4 <ADC_Update+0x36>
 3b2:	57 c0       	rjmp	.+174    	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
	{
			ADC_ControlBlock.ADC_StartConvertion=0;
 3b4:	ec e7       	ldi	r30, 0x7C	; 124
 3b6:	f0 e0       	ldi	r31, 0x00	; 0
 3b8:	17 86       	std	Z+15, r1	; 0x0f
			ADCSRA->Reg |= (1<<6); // start Conversion 
 3ba:	36 9a       	sbi	0x06, 6	; 6
			if		(ADC_ControlBlock.ADC_Interrupt == ADC_InterruptEnable)
 3bc:	85 81       	ldd	r24, Z+5	; 0x05
 3be:	88 30       	cpi	r24, 0x08	; 8
 3c0:	09 f4       	brne	.+2      	; 0x3c4 <ADC_Update+0x46>
 3c2:	4f c0       	rjmp	.+158    	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
				return;
			}
			else
			{
				// Polling Code
				while	(IS_BIT_CLEAR(ADCSRA->Reg,4)){}
 3c4:	34 9b       	sbis	0x06, 4	; 6
 3c6:	fe cf       	rjmp	.-4      	; 0x3c4 <ADC_Update+0x46>
				if		(ADC_ControlBlock.ADC_Resolution == ADC_10Bit)
 3c8:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <ADC_ControlBlock+0x4>
 3cc:	81 30       	cpi	r24, 0x01	; 1
 3ce:	09 f0       	breq	.+2      	; 0x3d2 <ADC_Update+0x54>
 3d0:	47 c0       	rjmp	.+142    	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
				{
					Temp_data = ADCL;
 3d2:	64 b1       	in	r22, 0x04	; 4
					Temp_data |= ADCH<<8;
 3d4:	85 b1       	in	r24, 0x05	; 5
 3d6:	70 e0       	ldi	r23, 0x00	; 0
 3d8:	78 2b       	or	r23, r24
					
					ADC_ControlBlock.ADC_Output = Temp_data;
 3da:	ec e7       	ldi	r30, 0x7C	; 124
 3dc:	f0 e0       	ldi	r31, 0x00	; 0
 3de:	75 8b       	std	Z+21, r23	; 0x15
 3e0:	64 8b       	std	Z+20, r22	; 0x14
					if		(ADC_ControlBlock.ADC_Channel > 7 && ADC_ControlBlock.ADC_Channel < 30 )
 3e2:	85 85       	ldd	r24, Z+13	; 0x0d
 3e4:	88 50       	subi	r24, 0x08	; 8
 3e6:	86 31       	cpi	r24, 0x16	; 22
 3e8:	28 f5       	brcc	.+74     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
					{
							if (ADC_ControlBlock.ADC_Resolution == ADC_10Bit)
							{
								ADC_ControlBlock.ADC_Output_InVolts = ((float)Temp_data*ADC_ControlBlock.ADC_VolatgeRefer_Value)/(512.0 * ADC_ControlBlock.ADC_Gain);
 3ea:	ef 01       	movw	r28, r30
 3ec:	80 e0       	ldi	r24, 0x00	; 0
 3ee:	90 e0       	ldi	r25, 0x00	; 0
 3f0:	0e 94 67 03 	call	0x6ce	; 0x6ce <__floatunsisf>
 3f4:	29 85       	ldd	r18, Y+9	; 0x09
 3f6:	3a 85       	ldd	r19, Y+10	; 0x0a
 3f8:	4b 85       	ldd	r20, Y+11	; 0x0b
 3fa:	5c 85       	ldd	r21, Y+12	; 0x0c
 3fc:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__mulsf3>
 400:	6b 01       	movw	r12, r22
 402:	7c 01       	movw	r14, r24
 404:	8e 85       	ldd	r24, Y+14	; 0x0e
 406:	68 2f       	mov	r22, r24
 408:	70 e0       	ldi	r23, 0x00	; 0
 40a:	80 e0       	ldi	r24, 0x00	; 0
 40c:	90 e0       	ldi	r25, 0x00	; 0
 40e:	0e 94 69 03 	call	0x6d2	; 0x6d2 <__floatsisf>
 412:	20 e0       	ldi	r18, 0x00	; 0
 414:	30 e0       	ldi	r19, 0x00	; 0
 416:	40 e0       	ldi	r20, 0x00	; 0
 418:	54 e4       	ldi	r21, 0x44	; 68
 41a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__mulsf3>
 41e:	9b 01       	movw	r18, r22
 420:	ac 01       	movw	r20, r24
 422:	c7 01       	movw	r24, r14
 424:	b6 01       	movw	r22, r12
 426:	0e 94 bf 02 	call	0x57e	; 0x57e <__divsf3>
 42a:	68 8b       	std	Y+16, r22	; 0x10
 42c:	79 8b       	std	Y+17, r23	; 0x11
 42e:	8a 8b       	std	Y+18, r24	; 0x12
 430:	9b 8b       	std	Y+19, r25	; 0x13
 432:	16 c0       	rjmp	.+44     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
					}
					else
					{
							if (ADC_ControlBlock.ADC_Resolution == ADC_10Bit)
							{
								ADC_ControlBlock.ADC_Output_InVolts = ((float)Temp_data*ADC_ControlBlock.ADC_VolatgeRefer_Value)/1024.0;
 434:	cc e7       	ldi	r28, 0x7C	; 124
 436:	d0 e0       	ldi	r29, 0x00	; 0
 438:	80 e0       	ldi	r24, 0x00	; 0
 43a:	90 e0       	ldi	r25, 0x00	; 0
 43c:	0e 94 67 03 	call	0x6ce	; 0x6ce <__floatunsisf>
 440:	29 85       	ldd	r18, Y+9	; 0x09
 442:	3a 85       	ldd	r19, Y+10	; 0x0a
 444:	4b 85       	ldd	r20, Y+11	; 0x0b
 446:	5c 85       	ldd	r21, Y+12	; 0x0c
 448:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__mulsf3>
 44c:	20 e0       	ldi	r18, 0x00	; 0
 44e:	30 e0       	ldi	r19, 0x00	; 0
 450:	40 e8       	ldi	r20, 0x80	; 128
 452:	5a e3       	ldi	r21, 0x3A	; 58
 454:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__mulsf3>
 458:	68 8b       	std	Y+16, r22	; 0x10
 45a:	79 8b       	std	Y+17, r23	; 0x11
 45c:	8a 8b       	std	Y+18, r24	; 0x12
 45e:	9b 8b       	std	Y+19, r25	; 0x13
								ADC_ControlBlock.ADC_Output_InVolts = ((float)Temp_data*ADC_ControlBlock.ADC_VolatgeRefer_Value)/256.0;
							}
					}
					
				}
				SETBIT(ADCSRA->Reg,4);	
 460:	34 9a       	sbi	0x06, 4	; 6
			}
	}
		return;
 462:	df 91       	pop	r29
 464:	cf 91       	pop	r28
 466:	ff 90       	pop	r15
 468:	ef 90       	pop	r14
 46a:	df 90       	pop	r13
 46c:	cf 90       	pop	r12
 46e:	08 95       	ret

00000470 <__vector_1>:
 void ( *volatile ISR1_PTR) (void)=NULL;
 void ( *volatile ISR2_PTR) (void)=NULL;


ISR(INT0_vect)
{
 470:	1f 92       	push	r1
 472:	0f 92       	push	r0
 474:	0f b6       	in	r0, 0x3f	; 63
 476:	0f 92       	push	r0
 478:	11 24       	eor	r1, r1
 47a:	2f 93       	push	r18
 47c:	3f 93       	push	r19
 47e:	4f 93       	push	r20
 480:	5f 93       	push	r21
 482:	6f 93       	push	r22
 484:	7f 93       	push	r23
 486:	8f 93       	push	r24
 488:	9f 93       	push	r25
 48a:	af 93       	push	r26
 48c:	bf 93       	push	r27
 48e:	ef 93       	push	r30
 490:	ff 93       	push	r31
	if (ISR0_PTR  != NULL)
 492:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <ISR0_PTR>
 496:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <ISR0_PTR+0x1>
 49a:	89 2b       	or	r24, r25
 49c:	29 f0       	breq	.+10     	; 0x4a8 <__vector_1+0x38>
	{
		ISR0_PTR();
 49e:	e0 91 7a 00 	lds	r30, 0x007A	; 0x80007a <ISR0_PTR>
 4a2:	f0 91 7b 00 	lds	r31, 0x007B	; 0x80007b <ISR0_PTR+0x1>
 4a6:	09 95       	icall
	}	
}
 4a8:	ff 91       	pop	r31
 4aa:	ef 91       	pop	r30
 4ac:	bf 91       	pop	r27
 4ae:	af 91       	pop	r26
 4b0:	9f 91       	pop	r25
 4b2:	8f 91       	pop	r24
 4b4:	7f 91       	pop	r23
 4b6:	6f 91       	pop	r22
 4b8:	5f 91       	pop	r21
 4ba:	4f 91       	pop	r20
 4bc:	3f 91       	pop	r19
 4be:	2f 91       	pop	r18
 4c0:	0f 90       	pop	r0
 4c2:	0f be       	out	0x3f, r0	; 63
 4c4:	0f 90       	pop	r0
 4c6:	1f 90       	pop	r1
 4c8:	18 95       	reti

000004ca <__vector_2>:

ISR(INT1_vect)
{
 4ca:	1f 92       	push	r1
 4cc:	0f 92       	push	r0
 4ce:	0f b6       	in	r0, 0x3f	; 63
 4d0:	0f 92       	push	r0
 4d2:	11 24       	eor	r1, r1
 4d4:	2f 93       	push	r18
 4d6:	3f 93       	push	r19
 4d8:	4f 93       	push	r20
 4da:	5f 93       	push	r21
 4dc:	6f 93       	push	r22
 4de:	7f 93       	push	r23
 4e0:	8f 93       	push	r24
 4e2:	9f 93       	push	r25
 4e4:	af 93       	push	r26
 4e6:	bf 93       	push	r27
 4e8:	ef 93       	push	r30
 4ea:	ff 93       	push	r31
		if (ISR1_PTR  != NULL)
 4ec:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <ISR1_PTR>
 4f0:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <ISR1_PTR+0x1>
 4f4:	89 2b       	or	r24, r25
 4f6:	29 f0       	breq	.+10     	; 0x502 <__vector_2+0x38>
		{
			ISR1_PTR();
 4f8:	e0 91 78 00 	lds	r30, 0x0078	; 0x800078 <ISR1_PTR>
 4fc:	f0 91 79 00 	lds	r31, 0x0079	; 0x800079 <ISR1_PTR+0x1>
 500:	09 95       	icall
		}
} 
 502:	ff 91       	pop	r31
 504:	ef 91       	pop	r30
 506:	bf 91       	pop	r27
 508:	af 91       	pop	r26
 50a:	9f 91       	pop	r25
 50c:	8f 91       	pop	r24
 50e:	7f 91       	pop	r23
 510:	6f 91       	pop	r22
 512:	5f 91       	pop	r21
 514:	4f 91       	pop	r20
 516:	3f 91       	pop	r19
 518:	2f 91       	pop	r18
 51a:	0f 90       	pop	r0
 51c:	0f be       	out	0x3f, r0	; 63
 51e:	0f 90       	pop	r0
 520:	1f 90       	pop	r1
 522:	18 95       	reti

00000524 <__vector_3>:
ISR(INT2_vect)
{
 524:	1f 92       	push	r1
 526:	0f 92       	push	r0
 528:	0f b6       	in	r0, 0x3f	; 63
 52a:	0f 92       	push	r0
 52c:	11 24       	eor	r1, r1
 52e:	2f 93       	push	r18
 530:	3f 93       	push	r19
 532:	4f 93       	push	r20
 534:	5f 93       	push	r21
 536:	6f 93       	push	r22
 538:	7f 93       	push	r23
 53a:	8f 93       	push	r24
 53c:	9f 93       	push	r25
 53e:	af 93       	push	r26
 540:	bf 93       	push	r27
 542:	ef 93       	push	r30
 544:	ff 93       	push	r31
		if (ISR2_PTR  != NULL)
 546:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <__data_end>
 54a:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <__data_end+0x1>
 54e:	89 2b       	or	r24, r25
 550:	29 f0       	breq	.+10     	; 0x55c <__vector_3+0x38>
		{
			ISR2_PTR();
 552:	e0 91 76 00 	lds	r30, 0x0076	; 0x800076 <__data_end>
 556:	f0 91 77 00 	lds	r31, 0x0077	; 0x800077 <__data_end+0x1>
 55a:	09 95       	icall
		}
}
 55c:	ff 91       	pop	r31
 55e:	ef 91       	pop	r30
 560:	bf 91       	pop	r27
 562:	af 91       	pop	r26
 564:	9f 91       	pop	r25
 566:	8f 91       	pop	r24
 568:	7f 91       	pop	r23
 56a:	6f 91       	pop	r22
 56c:	5f 91       	pop	r21
 56e:	4f 91       	pop	r20
 570:	3f 91       	pop	r19
 572:	2f 91       	pop	r18
 574:	0f 90       	pop	r0
 576:	0f be       	out	0x3f, r0	; 63
 578:	0f 90       	pop	r0
 57a:	1f 90       	pop	r1
 57c:	18 95       	reti

0000057e <__divsf3>:
 57e:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <__divsf3x>
 582:	0c 94 bb 03 	jmp	0x776	; 0x776 <__fp_round>
 586:	0e 94 b4 03 	call	0x768	; 0x768 <__fp_pscB>
 58a:	58 f0       	brcs	.+22     	; 0x5a2 <__divsf3+0x24>
 58c:	0e 94 ad 03 	call	0x75a	; 0x75a <__fp_pscA>
 590:	40 f0       	brcs	.+16     	; 0x5a2 <__divsf3+0x24>
 592:	29 f4       	brne	.+10     	; 0x59e <__divsf3+0x20>
 594:	5f 3f       	cpi	r21, 0xFF	; 255
 596:	29 f0       	breq	.+10     	; 0x5a2 <__divsf3+0x24>
 598:	0c 94 a4 03 	jmp	0x748	; 0x748 <__fp_inf>
 59c:	51 11       	cpse	r21, r1
 59e:	0c 94 ef 03 	jmp	0x7de	; 0x7de <__fp_szero>
 5a2:	0c 94 aa 03 	jmp	0x754	; 0x754 <__fp_nan>

000005a6 <__divsf3x>:
 5a6:	0e 94 cc 03 	call	0x798	; 0x798 <__fp_split3>
 5aa:	68 f3       	brcs	.-38     	; 0x586 <__divsf3+0x8>

000005ac <__divsf3_pse>:
 5ac:	99 23       	and	r25, r25
 5ae:	b1 f3       	breq	.-20     	; 0x59c <__divsf3+0x1e>
 5b0:	55 23       	and	r21, r21
 5b2:	91 f3       	breq	.-28     	; 0x598 <__divsf3+0x1a>
 5b4:	95 1b       	sub	r25, r21
 5b6:	55 0b       	sbc	r21, r21
 5b8:	bb 27       	eor	r27, r27
 5ba:	aa 27       	eor	r26, r26
 5bc:	62 17       	cp	r22, r18
 5be:	73 07       	cpc	r23, r19
 5c0:	84 07       	cpc	r24, r20
 5c2:	38 f0       	brcs	.+14     	; 0x5d2 <__divsf3_pse+0x26>
 5c4:	9f 5f       	subi	r25, 0xFF	; 255
 5c6:	5f 4f       	sbci	r21, 0xFF	; 255
 5c8:	22 0f       	add	r18, r18
 5ca:	33 1f       	adc	r19, r19
 5cc:	44 1f       	adc	r20, r20
 5ce:	aa 1f       	adc	r26, r26
 5d0:	a9 f3       	breq	.-22     	; 0x5bc <__divsf3_pse+0x10>
 5d2:	35 d0       	rcall	.+106    	; 0x63e <__divsf3_pse+0x92>
 5d4:	0e 2e       	mov	r0, r30
 5d6:	3a f0       	brmi	.+14     	; 0x5e6 <__divsf3_pse+0x3a>
 5d8:	e0 e8       	ldi	r30, 0x80	; 128
 5da:	32 d0       	rcall	.+100    	; 0x640 <__divsf3_pse+0x94>
 5dc:	91 50       	subi	r25, 0x01	; 1
 5de:	50 40       	sbci	r21, 0x00	; 0
 5e0:	e6 95       	lsr	r30
 5e2:	00 1c       	adc	r0, r0
 5e4:	ca f7       	brpl	.-14     	; 0x5d8 <__divsf3_pse+0x2c>
 5e6:	2b d0       	rcall	.+86     	; 0x63e <__divsf3_pse+0x92>
 5e8:	fe 2f       	mov	r31, r30
 5ea:	29 d0       	rcall	.+82     	; 0x63e <__divsf3_pse+0x92>
 5ec:	66 0f       	add	r22, r22
 5ee:	77 1f       	adc	r23, r23
 5f0:	88 1f       	adc	r24, r24
 5f2:	bb 1f       	adc	r27, r27
 5f4:	26 17       	cp	r18, r22
 5f6:	37 07       	cpc	r19, r23
 5f8:	48 07       	cpc	r20, r24
 5fa:	ab 07       	cpc	r26, r27
 5fc:	b0 e8       	ldi	r27, 0x80	; 128
 5fe:	09 f0       	breq	.+2      	; 0x602 <__divsf3_pse+0x56>
 600:	bb 0b       	sbc	r27, r27
 602:	80 2d       	mov	r24, r0
 604:	bf 01       	movw	r22, r30
 606:	ff 27       	eor	r31, r31
 608:	93 58       	subi	r25, 0x83	; 131
 60a:	5f 4f       	sbci	r21, 0xFF	; 255
 60c:	3a f0       	brmi	.+14     	; 0x61c <__divsf3_pse+0x70>
 60e:	9e 3f       	cpi	r25, 0xFE	; 254
 610:	51 05       	cpc	r21, r1
 612:	78 f0       	brcs	.+30     	; 0x632 <__divsf3_pse+0x86>
 614:	0c 94 a4 03 	jmp	0x748	; 0x748 <__fp_inf>
 618:	0c 94 ef 03 	jmp	0x7de	; 0x7de <__fp_szero>
 61c:	5f 3f       	cpi	r21, 0xFF	; 255
 61e:	e4 f3       	brlt	.-8      	; 0x618 <__divsf3_pse+0x6c>
 620:	98 3e       	cpi	r25, 0xE8	; 232
 622:	d4 f3       	brlt	.-12     	; 0x618 <__divsf3_pse+0x6c>
 624:	86 95       	lsr	r24
 626:	77 95       	ror	r23
 628:	67 95       	ror	r22
 62a:	b7 95       	ror	r27
 62c:	f7 95       	ror	r31
 62e:	9f 5f       	subi	r25, 0xFF	; 255
 630:	c9 f7       	brne	.-14     	; 0x624 <__divsf3_pse+0x78>
 632:	88 0f       	add	r24, r24
 634:	91 1d       	adc	r25, r1
 636:	96 95       	lsr	r25
 638:	87 95       	ror	r24
 63a:	97 f9       	bld	r25, 7
 63c:	08 95       	ret
 63e:	e1 e0       	ldi	r30, 0x01	; 1
 640:	66 0f       	add	r22, r22
 642:	77 1f       	adc	r23, r23
 644:	88 1f       	adc	r24, r24
 646:	bb 1f       	adc	r27, r27
 648:	62 17       	cp	r22, r18
 64a:	73 07       	cpc	r23, r19
 64c:	84 07       	cpc	r24, r20
 64e:	ba 07       	cpc	r27, r26
 650:	20 f0       	brcs	.+8      	; 0x65a <__divsf3_pse+0xae>
 652:	62 1b       	sub	r22, r18
 654:	73 0b       	sbc	r23, r19
 656:	84 0b       	sbc	r24, r20
 658:	ba 0b       	sbc	r27, r26
 65a:	ee 1f       	adc	r30, r30
 65c:	88 f7       	brcc	.-30     	; 0x640 <__divsf3_pse+0x94>
 65e:	e0 95       	com	r30
 660:	08 95       	ret

00000662 <__fixsfsi>:
 662:	0e 94 38 03 	call	0x670	; 0x670 <__fixunssfsi>
 666:	68 94       	set
 668:	b1 11       	cpse	r27, r1
 66a:	0c 94 ef 03 	jmp	0x7de	; 0x7de <__fp_szero>
 66e:	08 95       	ret

00000670 <__fixunssfsi>:
 670:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <__fp_splitA>
 674:	88 f0       	brcs	.+34     	; 0x698 <__fixunssfsi+0x28>
 676:	9f 57       	subi	r25, 0x7F	; 127
 678:	98 f0       	brcs	.+38     	; 0x6a0 <__fixunssfsi+0x30>
 67a:	b9 2f       	mov	r27, r25
 67c:	99 27       	eor	r25, r25
 67e:	b7 51       	subi	r27, 0x17	; 23
 680:	b0 f0       	brcs	.+44     	; 0x6ae <__fixunssfsi+0x3e>
 682:	e1 f0       	breq	.+56     	; 0x6bc <__fixunssfsi+0x4c>
 684:	66 0f       	add	r22, r22
 686:	77 1f       	adc	r23, r23
 688:	88 1f       	adc	r24, r24
 68a:	99 1f       	adc	r25, r25
 68c:	1a f0       	brmi	.+6      	; 0x694 <__fixunssfsi+0x24>
 68e:	ba 95       	dec	r27
 690:	c9 f7       	brne	.-14     	; 0x684 <__fixunssfsi+0x14>
 692:	14 c0       	rjmp	.+40     	; 0x6bc <__fixunssfsi+0x4c>
 694:	b1 30       	cpi	r27, 0x01	; 1
 696:	91 f0       	breq	.+36     	; 0x6bc <__fixunssfsi+0x4c>
 698:	0e 94 ee 03 	call	0x7dc	; 0x7dc <__fp_zero>
 69c:	b1 e0       	ldi	r27, 0x01	; 1
 69e:	08 95       	ret
 6a0:	0c 94 ee 03 	jmp	0x7dc	; 0x7dc <__fp_zero>
 6a4:	67 2f       	mov	r22, r23
 6a6:	78 2f       	mov	r23, r24
 6a8:	88 27       	eor	r24, r24
 6aa:	b8 5f       	subi	r27, 0xF8	; 248
 6ac:	39 f0       	breq	.+14     	; 0x6bc <__fixunssfsi+0x4c>
 6ae:	b9 3f       	cpi	r27, 0xF9	; 249
 6b0:	cc f3       	brlt	.-14     	; 0x6a4 <__fixunssfsi+0x34>
 6b2:	86 95       	lsr	r24
 6b4:	77 95       	ror	r23
 6b6:	67 95       	ror	r22
 6b8:	b3 95       	inc	r27
 6ba:	d9 f7       	brne	.-10     	; 0x6b2 <__fixunssfsi+0x42>
 6bc:	3e f4       	brtc	.+14     	; 0x6cc <__fixunssfsi+0x5c>
 6be:	90 95       	com	r25
 6c0:	80 95       	com	r24
 6c2:	70 95       	com	r23
 6c4:	61 95       	neg	r22
 6c6:	7f 4f       	sbci	r23, 0xFF	; 255
 6c8:	8f 4f       	sbci	r24, 0xFF	; 255
 6ca:	9f 4f       	sbci	r25, 0xFF	; 255
 6cc:	08 95       	ret

000006ce <__floatunsisf>:
 6ce:	e8 94       	clt
 6d0:	09 c0       	rjmp	.+18     	; 0x6e4 <__floatsisf+0x12>

000006d2 <__floatsisf>:
 6d2:	97 fb       	bst	r25, 7
 6d4:	3e f4       	brtc	.+14     	; 0x6e4 <__floatsisf+0x12>
 6d6:	90 95       	com	r25
 6d8:	80 95       	com	r24
 6da:	70 95       	com	r23
 6dc:	61 95       	neg	r22
 6de:	7f 4f       	sbci	r23, 0xFF	; 255
 6e0:	8f 4f       	sbci	r24, 0xFF	; 255
 6e2:	9f 4f       	sbci	r25, 0xFF	; 255
 6e4:	99 23       	and	r25, r25
 6e6:	a9 f0       	breq	.+42     	; 0x712 <__floatsisf+0x40>
 6e8:	f9 2f       	mov	r31, r25
 6ea:	96 e9       	ldi	r25, 0x96	; 150
 6ec:	bb 27       	eor	r27, r27
 6ee:	93 95       	inc	r25
 6f0:	f6 95       	lsr	r31
 6f2:	87 95       	ror	r24
 6f4:	77 95       	ror	r23
 6f6:	67 95       	ror	r22
 6f8:	b7 95       	ror	r27
 6fa:	f1 11       	cpse	r31, r1
 6fc:	f8 cf       	rjmp	.-16     	; 0x6ee <__floatsisf+0x1c>
 6fe:	fa f4       	brpl	.+62     	; 0x73e <__floatsisf+0x6c>
 700:	bb 0f       	add	r27, r27
 702:	11 f4       	brne	.+4      	; 0x708 <__floatsisf+0x36>
 704:	60 ff       	sbrs	r22, 0
 706:	1b c0       	rjmp	.+54     	; 0x73e <__floatsisf+0x6c>
 708:	6f 5f       	subi	r22, 0xFF	; 255
 70a:	7f 4f       	sbci	r23, 0xFF	; 255
 70c:	8f 4f       	sbci	r24, 0xFF	; 255
 70e:	9f 4f       	sbci	r25, 0xFF	; 255
 710:	16 c0       	rjmp	.+44     	; 0x73e <__floatsisf+0x6c>
 712:	88 23       	and	r24, r24
 714:	11 f0       	breq	.+4      	; 0x71a <__floatsisf+0x48>
 716:	96 e9       	ldi	r25, 0x96	; 150
 718:	11 c0       	rjmp	.+34     	; 0x73c <__floatsisf+0x6a>
 71a:	77 23       	and	r23, r23
 71c:	21 f0       	breq	.+8      	; 0x726 <__floatsisf+0x54>
 71e:	9e e8       	ldi	r25, 0x8E	; 142
 720:	87 2f       	mov	r24, r23
 722:	76 2f       	mov	r23, r22
 724:	05 c0       	rjmp	.+10     	; 0x730 <__floatsisf+0x5e>
 726:	66 23       	and	r22, r22
 728:	71 f0       	breq	.+28     	; 0x746 <__floatsisf+0x74>
 72a:	96 e8       	ldi	r25, 0x86	; 134
 72c:	86 2f       	mov	r24, r22
 72e:	70 e0       	ldi	r23, 0x00	; 0
 730:	60 e0       	ldi	r22, 0x00	; 0
 732:	2a f0       	brmi	.+10     	; 0x73e <__floatsisf+0x6c>
 734:	9a 95       	dec	r25
 736:	66 0f       	add	r22, r22
 738:	77 1f       	adc	r23, r23
 73a:	88 1f       	adc	r24, r24
 73c:	da f7       	brpl	.-10     	; 0x734 <__floatsisf+0x62>
 73e:	88 0f       	add	r24, r24
 740:	96 95       	lsr	r25
 742:	87 95       	ror	r24
 744:	97 f9       	bld	r25, 7
 746:	08 95       	ret

00000748 <__fp_inf>:
 748:	97 f9       	bld	r25, 7
 74a:	9f 67       	ori	r25, 0x7F	; 127
 74c:	80 e8       	ldi	r24, 0x80	; 128
 74e:	70 e0       	ldi	r23, 0x00	; 0
 750:	60 e0       	ldi	r22, 0x00	; 0
 752:	08 95       	ret

00000754 <__fp_nan>:
 754:	9f ef       	ldi	r25, 0xFF	; 255
 756:	80 ec       	ldi	r24, 0xC0	; 192
 758:	08 95       	ret

0000075a <__fp_pscA>:
 75a:	00 24       	eor	r0, r0
 75c:	0a 94       	dec	r0
 75e:	16 16       	cp	r1, r22
 760:	17 06       	cpc	r1, r23
 762:	18 06       	cpc	r1, r24
 764:	09 06       	cpc	r0, r25
 766:	08 95       	ret

00000768 <__fp_pscB>:
 768:	00 24       	eor	r0, r0
 76a:	0a 94       	dec	r0
 76c:	12 16       	cp	r1, r18
 76e:	13 06       	cpc	r1, r19
 770:	14 06       	cpc	r1, r20
 772:	05 06       	cpc	r0, r21
 774:	08 95       	ret

00000776 <__fp_round>:
 776:	09 2e       	mov	r0, r25
 778:	03 94       	inc	r0
 77a:	00 0c       	add	r0, r0
 77c:	11 f4       	brne	.+4      	; 0x782 <__fp_round+0xc>
 77e:	88 23       	and	r24, r24
 780:	52 f0       	brmi	.+20     	; 0x796 <__fp_round+0x20>
 782:	bb 0f       	add	r27, r27
 784:	40 f4       	brcc	.+16     	; 0x796 <__fp_round+0x20>
 786:	bf 2b       	or	r27, r31
 788:	11 f4       	brne	.+4      	; 0x78e <__fp_round+0x18>
 78a:	60 ff       	sbrs	r22, 0
 78c:	04 c0       	rjmp	.+8      	; 0x796 <__fp_round+0x20>
 78e:	6f 5f       	subi	r22, 0xFF	; 255
 790:	7f 4f       	sbci	r23, 0xFF	; 255
 792:	8f 4f       	sbci	r24, 0xFF	; 255
 794:	9f 4f       	sbci	r25, 0xFF	; 255
 796:	08 95       	ret

00000798 <__fp_split3>:
 798:	57 fd       	sbrc	r21, 7
 79a:	90 58       	subi	r25, 0x80	; 128
 79c:	44 0f       	add	r20, r20
 79e:	55 1f       	adc	r21, r21
 7a0:	59 f0       	breq	.+22     	; 0x7b8 <__fp_splitA+0x10>
 7a2:	5f 3f       	cpi	r21, 0xFF	; 255
 7a4:	71 f0       	breq	.+28     	; 0x7c2 <__fp_splitA+0x1a>
 7a6:	47 95       	ror	r20

000007a8 <__fp_splitA>:
 7a8:	88 0f       	add	r24, r24
 7aa:	97 fb       	bst	r25, 7
 7ac:	99 1f       	adc	r25, r25
 7ae:	61 f0       	breq	.+24     	; 0x7c8 <__fp_splitA+0x20>
 7b0:	9f 3f       	cpi	r25, 0xFF	; 255
 7b2:	79 f0       	breq	.+30     	; 0x7d2 <__fp_splitA+0x2a>
 7b4:	87 95       	ror	r24
 7b6:	08 95       	ret
 7b8:	12 16       	cp	r1, r18
 7ba:	13 06       	cpc	r1, r19
 7bc:	14 06       	cpc	r1, r20
 7be:	55 1f       	adc	r21, r21
 7c0:	f2 cf       	rjmp	.-28     	; 0x7a6 <__fp_split3+0xe>
 7c2:	46 95       	lsr	r20
 7c4:	f1 df       	rcall	.-30     	; 0x7a8 <__fp_splitA>
 7c6:	08 c0       	rjmp	.+16     	; 0x7d8 <__fp_splitA+0x30>
 7c8:	16 16       	cp	r1, r22
 7ca:	17 06       	cpc	r1, r23
 7cc:	18 06       	cpc	r1, r24
 7ce:	99 1f       	adc	r25, r25
 7d0:	f1 cf       	rjmp	.-30     	; 0x7b4 <__fp_splitA+0xc>
 7d2:	86 95       	lsr	r24
 7d4:	71 05       	cpc	r23, r1
 7d6:	61 05       	cpc	r22, r1
 7d8:	08 94       	sec
 7da:	08 95       	ret

000007dc <__fp_zero>:
 7dc:	e8 94       	clt

000007de <__fp_szero>:
 7de:	bb 27       	eor	r27, r27
 7e0:	66 27       	eor	r22, r22
 7e2:	77 27       	eor	r23, r23
 7e4:	cb 01       	movw	r24, r22
 7e6:	97 f9       	bld	r25, 7
 7e8:	08 95       	ret

000007ea <__mulsf3>:
 7ea:	0e 94 08 04 	call	0x810	; 0x810 <__mulsf3x>
 7ee:	0c 94 bb 03 	jmp	0x776	; 0x776 <__fp_round>
 7f2:	0e 94 ad 03 	call	0x75a	; 0x75a <__fp_pscA>
 7f6:	38 f0       	brcs	.+14     	; 0x806 <__mulsf3+0x1c>
 7f8:	0e 94 b4 03 	call	0x768	; 0x768 <__fp_pscB>
 7fc:	20 f0       	brcs	.+8      	; 0x806 <__mulsf3+0x1c>
 7fe:	95 23       	and	r25, r21
 800:	11 f0       	breq	.+4      	; 0x806 <__mulsf3+0x1c>
 802:	0c 94 a4 03 	jmp	0x748	; 0x748 <__fp_inf>
 806:	0c 94 aa 03 	jmp	0x754	; 0x754 <__fp_nan>
 80a:	11 24       	eor	r1, r1
 80c:	0c 94 ef 03 	jmp	0x7de	; 0x7de <__fp_szero>

00000810 <__mulsf3x>:
 810:	0e 94 cc 03 	call	0x798	; 0x798 <__fp_split3>
 814:	70 f3       	brcs	.-36     	; 0x7f2 <__mulsf3+0x8>

00000816 <__mulsf3_pse>:
 816:	95 9f       	mul	r25, r21
 818:	c1 f3       	breq	.-16     	; 0x80a <__mulsf3+0x20>
 81a:	95 0f       	add	r25, r21
 81c:	50 e0       	ldi	r21, 0x00	; 0
 81e:	55 1f       	adc	r21, r21
 820:	62 9f       	mul	r22, r18
 822:	f0 01       	movw	r30, r0
 824:	72 9f       	mul	r23, r18
 826:	bb 27       	eor	r27, r27
 828:	f0 0d       	add	r31, r0
 82a:	b1 1d       	adc	r27, r1
 82c:	63 9f       	mul	r22, r19
 82e:	aa 27       	eor	r26, r26
 830:	f0 0d       	add	r31, r0
 832:	b1 1d       	adc	r27, r1
 834:	aa 1f       	adc	r26, r26
 836:	64 9f       	mul	r22, r20
 838:	66 27       	eor	r22, r22
 83a:	b0 0d       	add	r27, r0
 83c:	a1 1d       	adc	r26, r1
 83e:	66 1f       	adc	r22, r22
 840:	82 9f       	mul	r24, r18
 842:	22 27       	eor	r18, r18
 844:	b0 0d       	add	r27, r0
 846:	a1 1d       	adc	r26, r1
 848:	62 1f       	adc	r22, r18
 84a:	73 9f       	mul	r23, r19
 84c:	b0 0d       	add	r27, r0
 84e:	a1 1d       	adc	r26, r1
 850:	62 1f       	adc	r22, r18
 852:	83 9f       	mul	r24, r19
 854:	a0 0d       	add	r26, r0
 856:	61 1d       	adc	r22, r1
 858:	22 1f       	adc	r18, r18
 85a:	74 9f       	mul	r23, r20
 85c:	33 27       	eor	r19, r19
 85e:	a0 0d       	add	r26, r0
 860:	61 1d       	adc	r22, r1
 862:	23 1f       	adc	r18, r19
 864:	84 9f       	mul	r24, r20
 866:	60 0d       	add	r22, r0
 868:	21 1d       	adc	r18, r1
 86a:	82 2f       	mov	r24, r18
 86c:	76 2f       	mov	r23, r22
 86e:	6a 2f       	mov	r22, r26
 870:	11 24       	eor	r1, r1
 872:	9f 57       	subi	r25, 0x7F	; 127
 874:	50 40       	sbci	r21, 0x00	; 0
 876:	9a f0       	brmi	.+38     	; 0x89e <__stack+0x3f>
 878:	f1 f0       	breq	.+60     	; 0x8b6 <__stack+0x57>
 87a:	88 23       	and	r24, r24
 87c:	4a f0       	brmi	.+18     	; 0x890 <__stack+0x31>
 87e:	ee 0f       	add	r30, r30
 880:	ff 1f       	adc	r31, r31
 882:	bb 1f       	adc	r27, r27
 884:	66 1f       	adc	r22, r22
 886:	77 1f       	adc	r23, r23
 888:	88 1f       	adc	r24, r24
 88a:	91 50       	subi	r25, 0x01	; 1
 88c:	50 40       	sbci	r21, 0x00	; 0
 88e:	a9 f7       	brne	.-22     	; 0x87a <__stack+0x1b>
 890:	9e 3f       	cpi	r25, 0xFE	; 254
 892:	51 05       	cpc	r21, r1
 894:	80 f0       	brcs	.+32     	; 0x8b6 <__stack+0x57>
 896:	0c 94 a4 03 	jmp	0x748	; 0x748 <__fp_inf>
 89a:	0c 94 ef 03 	jmp	0x7de	; 0x7de <__fp_szero>
 89e:	5f 3f       	cpi	r21, 0xFF	; 255
 8a0:	e4 f3       	brlt	.-8      	; 0x89a <__stack+0x3b>
 8a2:	98 3e       	cpi	r25, 0xE8	; 232
 8a4:	d4 f3       	brlt	.-12     	; 0x89a <__stack+0x3b>
 8a6:	86 95       	lsr	r24
 8a8:	77 95       	ror	r23
 8aa:	67 95       	ror	r22
 8ac:	b7 95       	ror	r27
 8ae:	f7 95       	ror	r31
 8b0:	e7 95       	ror	r30
 8b2:	9f 5f       	subi	r25, 0xFF	; 255
 8b4:	c1 f7       	brne	.-16     	; 0x8a6 <__stack+0x47>
 8b6:	fe 2b       	or	r31, r30
 8b8:	88 0f       	add	r24, r24
 8ba:	91 1d       	adc	r25, r1
 8bc:	96 95       	lsr	r25
 8be:	87 95       	ror	r24
 8c0:	97 f9       	bld	r25, 7
 8c2:	08 95       	ret

000008c4 <__udivmodsi4>:
 8c4:	a1 e2       	ldi	r26, 0x21	; 33
 8c6:	1a 2e       	mov	r1, r26
 8c8:	aa 1b       	sub	r26, r26
 8ca:	bb 1b       	sub	r27, r27
 8cc:	fd 01       	movw	r30, r26
 8ce:	0d c0       	rjmp	.+26     	; 0x8ea <__udivmodsi4_ep>

000008d0 <__udivmodsi4_loop>:
 8d0:	aa 1f       	adc	r26, r26
 8d2:	bb 1f       	adc	r27, r27
 8d4:	ee 1f       	adc	r30, r30
 8d6:	ff 1f       	adc	r31, r31
 8d8:	a2 17       	cp	r26, r18
 8da:	b3 07       	cpc	r27, r19
 8dc:	e4 07       	cpc	r30, r20
 8de:	f5 07       	cpc	r31, r21
 8e0:	20 f0       	brcs	.+8      	; 0x8ea <__udivmodsi4_ep>
 8e2:	a2 1b       	sub	r26, r18
 8e4:	b3 0b       	sbc	r27, r19
 8e6:	e4 0b       	sbc	r30, r20
 8e8:	f5 0b       	sbc	r31, r21

000008ea <__udivmodsi4_ep>:
 8ea:	66 1f       	adc	r22, r22
 8ec:	77 1f       	adc	r23, r23
 8ee:	88 1f       	adc	r24, r24
 8f0:	99 1f       	adc	r25, r25
 8f2:	1a 94       	dec	r1
 8f4:	69 f7       	brne	.-38     	; 0x8d0 <__udivmodsi4_loop>
 8f6:	60 95       	com	r22
 8f8:	70 95       	com	r23
 8fa:	80 95       	com	r24
 8fc:	90 95       	com	r25
 8fe:	9b 01       	movw	r18, r22
 900:	ac 01       	movw	r20, r24
 902:	bd 01       	movw	r22, r26
 904:	cf 01       	movw	r24, r30
 906:	08 95       	ret

00000908 <__itoa_ncheck>:
 908:	bb 27       	eor	r27, r27
 90a:	4a 30       	cpi	r20, 0x0A	; 10
 90c:	31 f4       	brne	.+12     	; 0x91a <__itoa_ncheck+0x12>
 90e:	99 23       	and	r25, r25
 910:	22 f4       	brpl	.+8      	; 0x91a <__itoa_ncheck+0x12>
 912:	bd e2       	ldi	r27, 0x2D	; 45
 914:	90 95       	com	r25
 916:	81 95       	neg	r24
 918:	9f 4f       	sbci	r25, 0xFF	; 255
 91a:	0c 94 90 04 	jmp	0x920	; 0x920 <__utoa_common>

0000091e <__utoa_ncheck>:
 91e:	bb 27       	eor	r27, r27

00000920 <__utoa_common>:
 920:	fb 01       	movw	r30, r22
 922:	55 27       	eor	r21, r21
 924:	aa 27       	eor	r26, r26
 926:	88 0f       	add	r24, r24
 928:	99 1f       	adc	r25, r25
 92a:	aa 1f       	adc	r26, r26
 92c:	a4 17       	cp	r26, r20
 92e:	10 f0       	brcs	.+4      	; 0x934 <__utoa_common+0x14>
 930:	a4 1b       	sub	r26, r20
 932:	83 95       	inc	r24
 934:	50 51       	subi	r21, 0x10	; 16
 936:	b9 f7       	brne	.-18     	; 0x926 <__utoa_common+0x6>
 938:	a0 5d       	subi	r26, 0xD0	; 208
 93a:	aa 33       	cpi	r26, 0x3A	; 58
 93c:	08 f0       	brcs	.+2      	; 0x940 <__utoa_common+0x20>
 93e:	a9 5d       	subi	r26, 0xD9	; 217
 940:	a1 93       	st	Z+, r26
 942:	00 97       	sbiw	r24, 0x00	; 0
 944:	79 f7       	brne	.-34     	; 0x924 <__utoa_common+0x4>
 946:	b1 11       	cpse	r27, r1
 948:	b1 93       	st	Z+, r27
 94a:	11 92       	st	Z+, r1
 94c:	cb 01       	movw	r24, r22
 94e:	0c 94 a9 04 	jmp	0x952	; 0x952 <strrev>

00000952 <strrev>:
 952:	dc 01       	movw	r26, r24
 954:	fc 01       	movw	r30, r24
 956:	67 2f       	mov	r22, r23
 958:	71 91       	ld	r23, Z+
 95a:	77 23       	and	r23, r23
 95c:	e1 f7       	brne	.-8      	; 0x956 <strrev+0x4>
 95e:	32 97       	sbiw	r30, 0x02	; 2
 960:	04 c0       	rjmp	.+8      	; 0x96a <strrev+0x18>
 962:	7c 91       	ld	r23, X
 964:	6d 93       	st	X+, r22
 966:	70 83       	st	Z, r23
 968:	62 91       	ld	r22, -Z
 96a:	ae 17       	cp	r26, r30
 96c:	bf 07       	cpc	r27, r31
 96e:	c8 f3       	brcs	.-14     	; 0x962 <strrev+0x10>
 970:	08 95       	ret

00000972 <_exit>:
 972:	f8 94       	cli

00000974 <__stop_program>:
 974:	ff cf       	rjmp	.-2      	; 0x974 <__stop_program>
